
Grammar for Palindromes over {0,1}

S -> A | B | empty     // INCORRECT: does not handle odd-length Pd's
A -> 0 S 0
B -> 1 S 1

FIRST(A) = {0}
FIRST(B) = {1}
FOLLOW(S) = {0,1,$}
FIRST(0S0) = {0}
FOLLOW(A) = {0,1,$}
FIRST(1S1) = {1}
FOLLOW(B) = {0,1,$}

This grammar is NOT LL(1)

So, make a new grammar...

alphabet = {0,1,a}

S -> A | B | a
A -> 0 S 0
B -> 1 S 1

FIRST(A) = {0}
FIRST(B) = {1}
FIRST(a) = {a}
FOLLOW(S) = {0,1,$}
FIRST(0S0) = {0}
FOLLOW(A) = {0,1,$}
FIRST(1S1) = {1}
FOLLOW(B) = {0,1,$}

This grammar IS LL(1)

NT      0        1         a          $
----------------------------------------
S     S->A     S->B      S->a
A    A->0S0
B             B->1S1

Parse of "011a110"

Stack           Lookahead          Action
-----------------------------------------
S $                0               apply S->A
A $                0               apply A->0S0
0 S 0 $            0               match & consume
S 0 $              1               apply S->B
B 0 $              1               apply B->1S1
1 S 1 0 $          1               match & consume
S 1 0 $            1(2)            apply S->B
B 1 0 $            1               apply B->1S1
1 S 1 1 0 $        1               match & consume
S 1 1 0 $          a               apply S->a
a 1 1 0 $          a               match & consume
1 1 0 $            1               match & consume
1 0 $              1(4)            match & consume
0 $                0               match & consume
$                  $               SUCCESS!

-------------------------------------------------------

Grammar for both even and odd length palindromes over {0,1}

S -> A | B | empty
A -> 0 S 0 | 0
B -> 1 S 1 | 1

Rightmost derivation of "0110110":
S
A        S->A
0S0      A->0S0
0B0      S->B
01S10    B->1S1
01B10    S->B
011S110  B->1S1
011A110  S->A
0110110  A->0

Grammar copied again and augmented:

S' -> S
123 S -> A | B | empty       FOLLOW(S) = {0,1,$}
45  A -> 0 S 0 | 0           FOLLOW(A) = {0,1,$}
67  B -> 1 S 1 | 1           FOLLOW(B) = {0,1,$}

S1 = Closure({S'->.S}) = {S'->.S, S->.A, S->.B, S->., 
                          A->.0S0, A->.0, B->.1S1, B->.1}
GoTo(S1,S) = Closure({S'->S.}) = {S'->S.} = S2
GoTo(S1,A) = Closure({S->A.}) = {S->A.} = S3
GoTo(S1,B) = Closure({S->B.}) = {S->B.} = S4
GoTo(S1,0) = Closure({A->0.S0, A->0.}) = {A->0.S0, A->0., S->.A, 
             S->.B, S->., A->.0S0, A->.0, B->.1S1, B->.1} = S5
GoTo(S1,1) = Closure({B->1.S1, B->1.}) = {B->1.S1, B->1., S->.A, 
             S->.B, S->., A->.0S0, A->.0, B->.1S1, B->.1} = S6
GoTo(S5,S) = Closure({A->0S.0}) = {A->0S.0} = S7
GoTo(S5,A) = S3
GoTo(S5,B) = S4
GoTo(S5,0) = S5
GoTo(S5,1) = S6
GoTo(S6,S) = Closure({B->1S.1}) = {B->1S.1} = S8
GoTo(S6,A) = S3
GoTo(S6,B) = S4
GoTo(S6,0) = S5
GoTo(S6,1) = S6
GoTo(S7,0) = Closure({A->0S0.}) = {A->0S0.} = S9
GoTo(s8,1) = Closure({B->1S1.}) = {B->1S1.} = S10

Build our SLR parse table(s)

       GOTO              ACTION (S/R)
     S   A   B      0        1        $   
S1  g2  g3  g4     sh5/r3  sh6/r3    r3
S2                                   accept
S3                 r1       r1       r1
S4                 r2       r2       r2
S5  g7  g3  g4   s5/r3/r5  s6/r3/r5  r3/r5
S6  g8  g3  g4   s5/r3/r6  s6/r3/r6  r3/r6
S7                 sh9
S8                          sh10
S9                 r4       r4       r4
S10                r6       r6       r6



