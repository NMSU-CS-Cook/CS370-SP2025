
Grammar for Palindromes over {0,1}

S -> A | B | empty     // INCORRECT: does not 
A -> 0 S 0             // handle odd-length
B -> 1 S 1             // palindromes

FIRST(A) = {0}
FIRST(B) = {1}
FOLLOW(S) = {0,1,$}
FIRST(0S0) = {0}
FOLLOW(A) = {0,1,$}
FIRST(1S1) = {1}
FOLLOW(B) = {0,1,$}

This grammar is NOT LL(1)

So, let's make a new grammar...

alphabet = {0,1,a}

S -> A | B | a
A -> 0 S 0
B -> 1 S 1

FIRST(A) = {0}
FIRST(B) = {1}
FIRST(a) = {a}
FOLLOW(S) = {0,1,$}
FIRST(0S0) = {0}
FOLLOW(A) = {0,1,$}
FIRST(1S1) = {1}
FOLLOW(B) = {0,1,$}

This grammar IS LL(1)

Top-down parsing table:

NT      0        1         a          $
----------------------------------------
S     S->A     S->B      S->a
A    A->0S0
B             B->1S1

Top-down parse of "011a110"

Stack           Lookahead          Action
-----------------------------------------
S $                0               apply S->A
A $                0               apply A->0S0
0 S 0 $            0               match & consume
S 0 $              1               apply S->B
B 0 $              1               apply B->1S1
1 S 1 0 $          1               match & consume
S 1 0 $            1(2)            apply S->B
B 1 0 $            1               apply B->1S1
1 S 1 1 0 $        1               match & consume
S 1 1 0 $          a               apply S->a
a 1 1 0 $          a               match & consume
1 1 0 $            1               match & consume
1 0 $              1(4)            match & consume
0 $                0               match & consume
$                  $               SUCCESS!

-------------------------------------------------------

Grammar for both even and odd length palindromes over {0,1}

S -> A | B | empty
A -> 0 S 0 | 0
B -> 1 S 1 | 1

Rightmost derivation of "0110110":
S
A        S->A
0S0      A->0S0
0B0      S->B
01S10    B->1S1
01B10    S->B
011S110  B->1S1
011A110  S->A
0110110  A->0

Grammar copied again, rule-numbered and augmented:

0   S' -> S
123 S -> A | B | empty       FOLLOW(S) = {0,1,$}
45  A -> 0 S 0 | 0           FOLLOW(A) = {0,1,$}
67  B -> 1 S 1 | 1           FOLLOW(B) = {0,1,$}

S1 = Closure({S'->.S}) = {S'->.S, S->.A, S->.B, S->., 
                          A->.0S0, A->.0, B->.1S1, B->.1}
GoTo(S1,S) = Closure({S'->S.}) = {S'->S.} = S2
GoTo(S1,A) = Closure({S->A.}) = {S->A.} = S3
GoTo(S1,B) = Closure({S->B.}) = {S->B.} = S4
GoTo(S1,0) = Closure({A->0.S0, A->0.}) = {A->0.S0, A->0., S->.A, 
             S->.B, S->., A->.0S0, A->.0, B->.1S1, B->.1} = S5
GoTo(S1,1) = Closure({B->1.S1, B->1.}) = {B->1.S1, B->1., S->.A, 
             S->.B, S->., A->.0S0, A->.0, B->.1S1, B->.1} = S6
GoTo(S5,S) = Closure({A->0S.0}) = {A->0S.0} = S7
GoTo(S5,A) = S3
GoTo(S5,B) = S4
GoTo(S5,0) = S5
GoTo(S5,1) = S6
GoTo(S6,S) = Closure({B->1S.1}) = {B->1S.1} = S8
GoTo(S6,A) = S3
GoTo(S6,B) = S4
GoTo(S6,0) = S5
GoTo(S6,1) = S6
GoTo(S7,0) = Closure({A->0S0.}) = {A->0S0.} = S9
GoTo(s8,1) = Closure({B->1S1.}) = {B->1S1.} = S10

Build our bottom-up SLR parse table(s), it
has LOTS of conflicts in it:

       GOTO              ACTION (S/R)
     S   A   B      0        1        $   
S1  g2  g3  g4     sh5/r3  sh6/r3    r3
S2                                   accept
S3                 r1       r1       r1
S4                 r2       r2       r2
S5  g7  g3  g4   s5/r3/r5  s6/r3/r5  r3/r5
S6  g8  g3  g4   s5/r3/r6  s6/r3/r6  r3/r6
S7                 sh9
S8                          sh10
S9                 r4       r4       r4
S10                r6       r6       r6

Attempt a parse of "0110":

Stack            Lookahead          Action
------------------------------------------
1                   0               shift 5
1 5                 1               shift 6
1 5 6               1(2nd)          shift 6
1 5 6 6             0               shift 5
1 5 6 6 5           $               reduce 5: A->0, goto 3
1 5 6 6 3           $               reduce 1: S->A, goto 8
1 5 6 6 8           $               parsing is broken here

If we choose to reduce on 3 at step 5, it still fails:

Stack            Lookahead          Action
------------------------------------------
1                   0               shift 5
1 5                 1               shift 6
1 5 6               1(2nd)          shift 6
1 5 6 6             0               shift 5
1 5 6 6 5           $               reduce 3: S->e, goto 7
1 5 6 6 5 7         $               broken parse again

The real fix is that we need to choose to 
reduce on S->empty earlier in the parse, on 
one of the shift/reduce conflicts:

Stack            Lookahead          Action
------------------------------------------
1                   0               shift 5
1 5                 1               shift 6
1 5 6               1(2nd)          REDUCE 3: S->e, goto 8
1 5 6 8             1               shift 10
1 5 6 8 10          0               reduce 6: B->1S1, goto 7
1 5 7               0               shift 9
1 5 7 9             $               reduce 4: A->0S0, goto 2
1 2                 $               ACCEPT

--------------------------------------------------------------

Let's do SLR parsing of our LL(1) grammar from above:

alphabet = {0,1,a}

0    S' -> S
123  S -> A | B | a     FOLLOW(S) = {0,1,$}
4    A -> 0 S 0         FOLLOW(A) = {0,1,$}
5    B -> 1 S 1         FOLLOW(B) = {0,1,$}

Note: I am not going to write out "Closure(...)" each time...

S1 = {S'->.S, S->.A, S->.B, S->.a, A->.0S0, B->.1S1}
GoTo(S1,S) = {S'->S.} = S2
GoTo(S1,A) = {S->A.} = S3
GoTo(S1,B) = {S->B.} = S4
GoTo(S1,0) = {A->0.S0, S->.A, S->.B, S->.a, A->.0S0, B->.1S1} = S5
GoTo(S1,1) = {B->1.S1, S->.A, S->.B, S->.a, A->.0S0, B->.1S1} = S6
GoTo(S1,a) = {S->a.} = S7
GoTo(S5,S) = {A->0S.0} = S8
GoTo(S5,A) = S3
GoTo(S5,B) = S4
GoTo(S5,0) = S5
GoTo(S5,1) = S6
GoTo(S5,a) = S7
GoTo(S6,S) = {B->1S.1} = S9
GoTo(S6,A) = S3
GoTo(S6,B) = S4
GoTo(S6,0) = S5
GoTo(S6,1) = S6
GoTo(S6,a) = S7
GoTo(S8,0) = {A->0S0.} = S10
GoTo(S9,1) = {B->1S1.} = S11

SLR Parse Table:

       S   A   B       0      1     a     $
S1    g2  g3  g4      s5     s6    s7
S2                                      accept
S3                    r1     r1          r1
S4                    r2     r2          r2
S5    g8  g3  g4      s5     s6    s7
S6    g9  g3  g4      s5     s6    s7
S7                    r3     r3          r3
S8                    s10
S9                           s11
S10                   r4     r4          r4
S11                   r5     r5          r5

No conflicts because it was LL(1), so it is LR(1)!

Parse of "011a110":

Stack               Lookahead       Action
1                      0            shift 5
1 5                    1            shift 6
1 5 6                  1(2nd)       shift 6
1 5 6 6                a            shift 7
1 5 6 6 7              1            reduce S->a, goto 9
1 5 6 6 9              1            shift 11
1 5 6 6 9 11           1(4th)       reduce B->1S1, goto 4
1 5 6 4                1            reduce S->B, goto 9
1 5 6 9                1            shift 11
1 5 6 9 11             0            reduce B->1S1, goto 4
1 5 4                  0            reduce S->B, goto 8
1 5 8                  0            shift 10
1 5 8 10               $            reduce A->0S0, goto 3
1 3                    $            reduce S->A, goto 2
1 2                    $            ACCEPT


